{"version":3,"sources":["components/checkoutItem/checkoutItem.js","components/stribeButton/stripeButton.js","pages/checkoutpage/checkout.js"],"names":["connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","name","imageUrl","price","quantity","className","alt","src","onClick","StripeCheckoutButton","priceForStripe","label","shippingAddress","billingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","id"],"mappings":"2NAgCeA,G,OAAAA,YAAQ,MAPI,SAAAC,GAAQ,MAAK,CACpCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAI7BH,EA1BM,SAAC,GAAgD,IAA/CO,EAA8C,EAA9CA,SAAUL,EAAoC,EAApCA,UAAWG,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC1CE,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,SAC9B,OACI,sBAAKC,UAAU,gBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,qBAAKC,IAAI,OAAOC,IAAKL,MAEzB,sBAAMG,UAAU,OAAhB,SAAwBJ,IACxB,uBAAMI,UAAU,WAAhB,UACI,qBAAKA,UAAU,QAAQG,QAAS,kBAAMT,EAAWC,IAAjD,oBACA,sBAAMK,UAAU,QAAhB,SAAyBD,IACzB,qBAAKC,UAAU,QAAQG,QAAS,kBAAMV,EAAQE,IAA9C,uBAEJ,uBAAMK,UAAU,QAAhB,cAA0BF,KAC1B,qBAAKE,UAAU,gBAAgBG,QAAS,kBAAMb,EAAUK,IAAxD,2B,oCCsBGS,EAtCc,SAAC,GAAa,IAAZN,EAAW,EAAXA,MACrBO,EAAyB,IAARP,EAqBvB,OACI,cAAC,IAAD,CACIQ,MAAM,UACNV,KAAK,iBACLW,iBAAe,EACfC,gBAAc,EACdC,MAAM,iCACNC,YAAW,yBAAoBZ,GAC/Ba,OAAQN,EACRO,WAAW,UACXC,MA5BQ,SAAAA,GACZC,IAAM,CACFC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACFN,OAAQN,EACRQ,WAELK,MAAK,SAAAC,GACJC,MAAM,yBACPC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACI,8CAgBJO,UA/Be,iHC2CrBC,G,OAAkBC,YAAyB,CAC7CC,UAAWC,IACXC,MAAOC,OAII7C,sBAAQwC,EAARxC,EA5CM,SAAC,GAAD,IAAE0C,EAAF,EAAEA,UAAWE,EAAb,EAAaA,MAAb,OACjB,sBAAKhC,UAAU,gBAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,6CAEJ,qBAAKA,UAAU,eAAf,SACI,iDAEJ,qBAAKA,UAAU,eAAf,SACI,8CAEJ,qBAAKA,UAAU,eAAf,SACI,2CAEJ,qBAAKA,UAAU,eAAf,SACI,+CAIJ8B,EAAUI,KAAI,SAAAvC,GAAQ,OAClB,cAAC,EAAD,CAAgCA,SAAUA,GAAvBA,EAASwC,OAGpC,qBAAKnC,UAAU,QAAf,SACI,4CAAegC,OAGnB,sBAAKhC,UAAU,eAAf,8DACqD,uBADrD,4BAE6B,uBAF7B,yBAG0B,uBAH1B,cAMA,cAAC,EAAD,CAAsBF,MAAOkC","file":"static/js/8.120ebfc9.chunk.js","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {clearItemFromCart, addItem, removeItem} from \"../../redux/cart/cartActions\";\n\nimport './checkout-item.scss'\n\nconst CheckoutItem = ({cartItem, clearItem, addItem, removeItem}) => {\n    const {name, imageUrl, price, quantity} = cartItem\n    return (\n        <div className=\"checkout-item\">\n            <div className=\"image-container\">\n                <img alt=\"item\" src={imageUrl} />\n            </div>\n            <span className=\"name\">{name}</span>\n            <span className=\"quantity\">\n                <div className=\"arrow\" onClick={() => removeItem(cartItem)}>&#10094;</div>\n                <span className=\"value\">{quantity}</span>\n                <div className=\"arrow\" onClick={() => addItem(cartItem)}>&#10095;</div>\n            </span>\n            <span className=\"price\">${price}</span>\n            <div className=\"remove-button\" onClick={() => clearItem(cartItem)}>&#10006;</div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    clearItem: item => dispatch(clearItemFromCart(item)),\n    addItem: item => dispatch(addItem(item)),\n    removeItem: item => dispatch(removeItem(item))\n\n})\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem)\n","import React from 'react'\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\n\nconst StripeCheckoutButton = ({price}) => {\n    const priceForStripe = price * 100\n    const publishableKey = 'pk_test_51I6gikF8UizeRnAkUP3Xd7kIodq4dIVpuV7wKpRNcFrvpwJrxS3x3J4HzL50myX0AF2a9n2AxAhQKwT5hRy7fmFW00LGrcmMLn'\n\n    const onToken = token => {\n        axios({\n            url: 'payment',\n            method: 'post',\n            data: {\n                amount: priceForStripe,\n                token\n            }\n        }).then(response => {\n            alert('Payment Successful')\n        }).catch(error => {\n            console.log('Payment Error: ', JSON.parse(error));\n            alert (\n                'There was an issue with your payment. '\n            );\n        });\n    }\n\n    return (\n        <StripeCheckout\n            label=\"Pay Now\" // text inside the Stripe button\n            name=\"Crown Clothing\" // the pop-in header title\n            shippingAddress\n            billingAddress\n            image=\"https://svgshare.com/i/CUz.svg\" // the pop-in header image (default none)\n            description={`Your total is $${price}`} // the pop-in header subtitle\n            amount={priceForStripe} // cents\n            panelLabel=\"Pay Now\" // prepended to the amount in the bottom pay button\n            token={onToken}\n            stripeKey={publishableKey}\n        />\n    )\n}\n\nexport default StripeCheckoutButton\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {createStructuredSelector} from \"reselect\";\n\nimport {selectCartItems, selectCartTotal} from \"../../redux/cart/cartSelectors\";\n\nimport CheckoutItem from \"../../components/checkoutItem/checkoutItem\";\nimport StripeCheckoutButton from \"../../components/stribeButton/stripeButton\";\n\nimport './checkout.scss'\n\nconst CheckoutPage = ({cartItems, total}) => (\n    <div className=\"checkout-page\">\n        <div className=\"checkout-header\">\n            <div className=\"header-block\">\n                <span>Product</span>\n            </div>\n            <div className=\"header-block\">\n                <span>Description</span>\n            </div>\n            <div className=\"header-block\">\n                <span>Quantity</span>\n            </div>\n            <div className=\"header-block\">\n                <span>Price</span>\n            </div>\n            <div className=\"header-block\">\n                <span>Remove</span>\n            </div>\n        </div>\n        {\n            cartItems.map(cartItem => (\n                <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n            ))\n        }\n        <div className=\"total\">\n            <span>Total: ${total}</span>\n        </div>\n\n        <div className=\"test-warning\">\n            *Use the following test credit card for payments*<br/>\n            CC #: 4242 4242 4242 4242<br/>\n            Expiration Date: 01/25<br/>\n            CCV: 123\n        </div>\n        <StripeCheckoutButton price={total} />\n    </div>\n)\n\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    total: selectCartTotal\n\n})\n\nexport default connect(mapStateToProps)(CheckoutPage)\n"],"sourceRoot":""}