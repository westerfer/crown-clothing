{"version":3,"sources":["pages/collectionpage/collection.js","pages/collectionpage/collectionPageContainer.js","redux/shop/shopSelector.js","components/collectionItem/CollectionItem.js"],"names":["connect","state","ownProps","collection","selectCollection","match","params","collectionId","useEffect","console","log","unsubscribeFromCollections","firestore","onSnapshot","snapshot","title","items","className","map","item","CollectionItem","id","mapStateToProps","createStructuredSelector","isLoading","isCollectionLoaded","CollectionPageContainer","compose","WithSpinner","CollectionPage","selectShop","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","key","collectionUrlParam","SelectIsCollectionFetching","isFetching","dispatch","addItem","name","price","imageUrl","style","backgroundImage","onClick","inverted"],"mappings":"sOAmCeA,eAJS,SAACC,EAAOC,GAAR,MAAsB,CAC1CC,WAAYC,YAAiBF,EAASG,MAAMC,OAAOC,aAAvCH,CAAqDH,MAGtDD,EA3BQ,SAAC,GAAoB,IAAlBG,EAAiB,EAAjBA,WACtBK,qBAAU,WACNC,QAAQC,IAAI,kBACZ,IAAMC,EAA6BC,IAAUT,WAAW,eAAeU,YAAW,SAAAC,GAAQ,OAAIL,QAAQC,IAAII,MAE1G,OAAM,WACFL,QAAQC,IAAI,oBACZC,OAEL,IAToC,IAU/BI,EAAiBZ,EAAjBY,MAAOC,EAAUb,EAAVa,MACf,OACI,sBAAKC,UAAU,kBAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBF,IACvB,qBAAKE,UAAU,QAAf,SACKD,EAAME,KAAI,SAAAC,GAAI,OACX,cAACC,EAAA,EAAD,CAA8BD,KAAMA,GAAfA,EAAKE,eCjBxCC,EAAkBC,YAAyB,CAC7CC,UAAW,SAACvB,GAAD,OAAYwB,YAAmBxB,MAGxCyB,EAA0BC,YAC5B3B,YAAQsB,GACRM,IAF4BD,CAG9BE,GAEaH,a,gCChBf,oJAEMI,EAAa,SAAA7B,GAAK,OAAIA,EAAM8B,MAErBC,EAAoBC,YAC7B,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKG,eAGJC,EAA8BF,YACvC,CAACD,IACD,SAAAE,GAAW,OAAIA,EAAcE,OAAOC,KAAKH,GAAahB,KAAI,SAAAoB,GAAG,OAAIJ,EAAYI,MAAQ,MAG5ElC,EAAmB,SAAAmC,GAAkB,OAC9CN,YACA,CAACD,IACD,SAAAE,GAAW,OAAIA,EAAcA,EAAYK,GAAsB,SAGtDC,EAA6BP,YACtC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKU,cAGJhB,EAAqBQ,YAC9B,CAACH,IACD,SAAAC,GAAI,QAAMA,EAAKG,gB,kFCMJlC,gBACX,MALuB,SAAA0C,GAAQ,MAAK,CACpCC,QAAS,SAAAxB,GAAI,OAAIuB,EAASC,YAAQxB,QAGvBnB,EA1BQ,SAAC,GAAuB,IAArBmB,EAAoB,EAApBA,KAAMwB,EAAc,EAAdA,QACpBC,EAA0BzB,EAA1ByB,KAAMC,EAAoB1B,EAApB0B,MAAOC,EAAa3B,EAAb2B,SAErB,OACI,sBAAK7B,UAAU,kBAAf,UACI,qBACIA,UAAU,QACV8B,MAAO,CACHC,gBAAgB,OAAD,OAASF,EAAT,QAGvB,sBAAK7B,UAAU,oBAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwB2B,IACxB,uBAAM3B,UAAU,QAAhB,cAA0B4B,QAE9B,cAAC,IAAD,CAAQI,QAAS,kBAAMN,EAAQxB,IAAO+B,UAAQ,EAA9C,gC","file":"static/js/6.4f186dda.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {selectCollection} from \"../../redux/shop/shopSelector\";\nimport CollectionItem from \"../../components/collectionItem/CollectionItem\";\nimport './collection.scss'\n\nimport {firestore} from \"../../firebase/firebaseUtils\";\n\nconst CollectionPage = ({ collection }) => {\n    useEffect(() => {\n        console.log('Im subscribing')\n        const unsubscribeFromCollections = firestore.collection('collections').onSnapshot(snapshot => console.log(snapshot))\n\n        return() => {\n            console.log(\"a am unsubscibed\")\n            unsubscribeFromCollections()\n        }\n    }, [])\n    const { title, items } = collection;\n    return (\n        <div className='collection-page'>\n            <h2 className='title'>{title}</h2>\n            <div className='items'>\n                {items.map(item => (\n                    <CollectionItem key={item.id} item={item} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n    collection: selectCollection(ownProps.match.params.collectionId)(state)\n});\n\nexport default connect(mapStateToProps)(CollectionPage);\n","import {connect} from 'react-redux'\nimport {compose} from \"redux\";\nimport {createStructuredSelector} from \"reselect\";\nimport {isCollectionLoaded} from \"../../redux/shop/shopSelector\";\nimport WithSpinner from \"../../components/spinner/spinner\";\nimport CollectionPage from \"./collection\";\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: (state) => !isCollectionLoaded(state)\n})\n\nconst CollectionPageContainer = compose(\n    connect(mapStateToProps),\n    WithSpinner,\n)(CollectionPage)\n\nexport default CollectionPageContainer\n","import {createSelector} from \"reselect\";\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectCollections],\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\n);\n\nexport const selectCollection = collectionUrlParam =>\n    createSelector(\n    [selectCollections],\n    collections => collections ? collections[collectionUrlParam] : null\n);\n\nexport const SelectIsCollectionFetching = createSelector (\n    [selectShop],\n    shop => shop.isFetching\n)\n\nexport const isCollectionLoaded = createSelector (\n    [selectShop],\n    shop => !!shop.collections\n)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {addItem} from \"../../redux/cart/cartActions\";\n\nimport './collection-item.scss'\nimport Button from \"../button/button\";\n\nconst CollectionItem = ({ item, addItem }) => {\n    const { name, price, imageUrl } = item;\n\n    return (\n        <div className='collection-item'>\n            <div\n                className='image'\n                style={{\n                    backgroundImage: `url(${imageUrl})`\n                }}\n            />\n            <div className='collection-footer'>\n                <span className='name'>{name}</span>\n                <span className='price'>${price}</span>\n            </div>\n            <Button onClick={() => addItem(item)} inverted>\n                Add to cart\n            </Button>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(CollectionItem);\n"],"sourceRoot":""}